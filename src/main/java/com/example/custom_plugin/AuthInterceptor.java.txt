package com.example.custom_plugin;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowire;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.example.blogcore.annotation.AuthCheckAnotation;
import com.example.blogcore.enums.UserRoleEnum;
import com.example.blogcore.model.atest.Users;

import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpServletRequest;


@Aspect
@Component
public class AuthInterceptor {

    @Autowired
    private UsersServiceImpl userService;

    /**
     * 执行拦截
     *
     * @param joinPoint
     * @param authCheck
     * @return
     */
    @Around("@annotation(authCheck)")
    public Object doInterceptor(ProceedingJoinPoint joinPoint, AuthCheckAnotation authCheck) throws Throwable {
        // String mustRole = authCheck.mustRole();
        RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes();
        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();
        // 当前登录用户
        Users loginUser = userService.getCurrent(request);
        if (loginUser == null)
          throw new BadRequestException("用户未登录");

        UserRoleEnum mustRoleEnum = authCheck.mustRole();
        // 不需要权限，放行
        if (mustRoleEnum == null) {
            return joinPoint.proceed();
        } 
        // 必须有该权限才通过
        UserRoleEnum userRoleEnum = UserRoleEnum.USER;
        if (userRoleEnum == null) {
            throw new BadRequestException("NO_AUTH_ERROR");
        }
        // 如果被封号，直接拒绝
        if (UserRoleEnum.BAN.equals(userRoleEnum)) {
            throw new BadRequestException("NO_AUTH_ERROR");
        }
        // 必须有管理员权限
        if (UserRoleEnum.ADMIN.equals(mustRoleEnum)) {
            // 用户没有管理员权限，拒绝
            if (!UserRoleEnum.ADMIN.equals(userRoleEnum)) {
                throw new BadRequestException("NO_AUTH_ERROR");
            }
        }
        // 通过权限校验，放行
        return joinPoint.proceed();
    }
}
